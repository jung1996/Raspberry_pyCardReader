# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_panel_v1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5 import uic
from PyQt5.QtWidgets import *
import datetime


import serial
import config
import Serial_Card_Msg
import Serial_QR_Msg
#import GPIO_Control
import time
import argparse
import RPi.GPIO as GPIO
import WinSock_Msg
from socket import *

import camera_data
from imutils.video import VideoStream
from pyzbar import pyzbar
import imutils
import argparse
import imutils
import time
import cv2

#serial, sock, db 통신 연결을 위한 config 파일 load
cfg = config.Env_Config()

#pyQT5 ui 파일 로드
ui_form = uic.loadUiType("main_panel.ui")[0]
#시간 표시하기 위한 타이머
timer = QTimer()

GPIO_DO = [2,3,17,18,27,22,23,24]
GPIO_DI = [11,7,6,16,19,20,26,21]
#불필요한 WARNING 제거
GPIO.setwarnings(False)

#GPIO 핀의 번호모드 설정
GPIO.setmode(GPIO.BCM)

#GPIO_INPUT 핀 설정
for channel in GPIO_DI:
	GPIO.setup([channel], GPIO.IN)
	
#GPIO_OUTPUT 핀 설정
for channel in GPIO_DO:
	GPIO.setup([channel], GPIO.OUT, initial=GPIO.LOW)

class MainWindow(QMainWindow, ui_form):

	INDEX_CARD1 = 1
	card1_connect = False
	card1_id = 12345678
	card1_car_num = "서울1234"
	
	INDEX_CARD2 = 2
	card2_connect = False
	card2_id = 87654321
	card2_car_num = "서울1234"

	INDEX_QR1 = 3
	
	def __init__(self):
		super().__init__()
		self.setupUi(self)
		self.setFixedSize(800, 480)
		self.page_num = 0
		self.page_num1 = 0 #페이지 숫자 변수 --
		self.page_num2 = 0
		self.page_num3 = 0 #페이지 숫자 변수 ++
		self.page_num4 = 0

		#타이머 connect
		timer.start(1000)
		#1초마다 timeout 이벤트가 발생하며, timeout 함수를 호출함
		timer.timeout.connect(self.in_led)
		timer.timeout.connect(self.lcd_run)
		timer.timeout.connect(self.lcd_run2)
		timer.timeout.connect(self.page3_1)
		timer.timeout.connect(self.page3_2)
		timer.timeout.connect(self.page4_1)
		timer.timeout.connect(self.page4_2)
		timer.timeout.connect(self.page5_1)
		timer.timeout.connect(self.page5_2)
		timer.timeout.connect(self.page1_1)
		timer.timeout.connect(self.page1_2)
		timer.timeout.connect(self.datetimer)

		self.SOCK_CONTENT_CMD_DO_ONOFF = 1
	
		#종료 버튼 활성화
		self.pushButton_exit1.clicked.connect(QCoreApplication.instance().quit)
		
		#silo그림 set
		self.pushButton_silo1.setStyleSheet("border-image:url(/home/pi/Desktop/make/image/silo_image.jpg);")
		self.pushButton_silo2.setStyleSheet("border-image:url(/home/pi/Desktop/make/image/silo_image.jpg);")
		
		#serial 통신 연결 시도
		try:
			card1_ser = serial.Serial(cfg.CARD1, 9600, timeout=0.2)
			# 시리얼 데이터 읽는 쓰레드 생성
			card1_recv = Serial_Card_Msg.CardMsgRecvThread(card1_ser, self.INDEX_CARD1)
			
			#serial 통신을 처리하는 각 쓰레들로부터 데이터를 받을 경우 처리하는 콜백함수 등록
			card1_recv.recv_cplt.connect(self.cb_serial_card_recv_cplt)
			card1_recv.start()
			
		except (OSError, serial.SerialException):
			print('CARD1 통신 포트 연결 실패!! ')
			
		try:
			card2_ser = serial.Serial(cfg.CARD2, 9600, timeout=0.2)
			# 시리얼 데이터 읽는 쓰레드 생성
			card2_recv = Serial_Card_Msg.CardMsgRecvThread(card2_ser, self.INDEX_CARD2)
			
			#serial 통신을 처리하는 각 쓰레들로부터 데이터를 받을 경우 처리하는 콜백함수 등록
			card2_recv.recv_cplt.connect(self.cb_serial_card_recv_cplt)
			card2_recv.start()
			
		except (OSError, serial.SerialException):
			print('qr1 통신 포트 연결 실패!! ')

		try:
			qr1_ser = serial.Serial(cfg.QR1, 9600, timeout=0.2)
			# 시리얼 데이터 읽는 쓰레드 생성
			qr1_recv = Serial_QR_Msg.QRMsgRecvThread(qr1_ser, self.INDEX_QR1)
			
			#serial 통신을 처리하는 각 쓰레들로부터 데이터를 받을 경우 처리하는 콜백함수 등록
			qr1_recv.recv_cplt2.connect(self.cb_serial_qr_recv_cplt)
			qr1_recv.start()
			
		except (OSError, serial.SerialException):
			print('QR1 통신 포트 연결 실패!! ')

		try:
			host = '192.168.11.162'
			port = 7002
			#서버에 Bind
			c_socket = socket(AF_INET, SOCK_STREAM)
			c_socket.connect(((host),(port)))
			#데이터 송신 방법
			c_socket.send('send data!!'.encode('utf-8'))

			#print('(recv data) card_id1 :', c_socket)
			
			# SOCK 데이터 읽는 쓰레드 생성
			sock_recv = WinSock_Msg.SockMsgRecvThread(c_socket)
			
			# sock 통신으로부터 cmd, msg 데이터가 정상 ""수신""되면 호출되는 콜백함수
			sock_recv.recv_cplt1.connect(self.cb_sock_recv_cplt)
			sock_recv.start()
			
		except (OSError, TypeError):
			print('SOCK 통신 연결 실패!! ')

	#camera 연결시도
		try:
			ap = argparse.ArgumentParser()
			ap.add_argument("-o", "--output", type=str, default="barcodes.csv",help="path to output CSV file containing barcodes")
			args = vars(ap.parse_args())

			### From there, let’s initialize our video stream and open our CSV file:
			# initialize the video stream and allow the camera sensor to warm up
			# 비티오 스트림 초기화 및 카메라 센서가 예열되도록 함
			print("[INFO] starting video stream...")

			vs = VideoStream(src=0).start()				 # USB 웹캠 카메라 사용시
			#self.vs = self.VideoStream(usePiCamera=True).start()	 # 파이 카메라 사용시

			# open the output CSV file for writing and initialize the set of
			# barcodes found thus far
			# 작성을 위해 출력된 CSV 파일을 열고, 지금까지 찾은 바코드 세트 초기화
			csv = open(args["output"], "w")
			found = set()


			# 시리얼 데이터 읽는 쓰레드 생성
			camera_var = camera_data.Camera_Thread(vs, csv, found)

			camera_var.recv_cplt2.connect(self.cb_camera_data_cplt)
			#camera_var.stop()

		except (OSError, serial.SerialException):
			print('카메라 연결 실패!!')
		
	#CARD 리더기 시리얼 통신으로 부터 데이터가 정상적으로 수신되면 호출되는 함수
	@pyqtSlot(int, str)
	def cb_serial_card_recv_cplt(self, thread_index, card_id):
		try:
			if thread_index == self.INDEX_CARD1:
				#if db() == True:

				self.card1_connect = True
				self.card1_car_num = "1234"
				self.card1_id = card_id

				print('(recv data) card_id1 :', self.card1_id)
					
				#DB에 등록되어 있는 카드 데이터가 들어오면, GUI에 표시함
				#카드1 데이터가 들어오면 ok버튼 화성화
				if self.card1_connect == True:
					self.textEdit_card1.setText(self.card1_id)
					print("ok!")

			elif thread_index == self.INDEX_CARD2:
				#if db() == True:

				self.card2_connect = True
				self.card2_car_num = "5678"
				self.card2_id = card_id

				print('(recv data) card_id2 :', self.card2_id)
	
				#DB에 등록되어 있는 카드 데이터가 들어오면, GUI에 표시함
				#카드2 데이터가 들어오면 ok버튼 활성화
				if self.card2_connect == True:
					self.textEdit_card2.setText(self.card2_id)
					print("ok!")
		except:
			pass

	@pyqtSlot(int, str, str, str, str)
	def cb_serial_qr_recv_cplt(self, account, product_name, car_number, stock):
		try:
			#if db() == True:
			self.qr1_connect = True
			self.account1 = account
			self.product_name1 = product_name
			self.car_number1 = car_number
			self.stock1 =stock

			#print('data:',self.car_number1)
			print('(recv data) sss :', '차량번호:',self.car_number1, '거래처:',self.account1, '품명:',self.product_name1, '입고량:',self.stock1)
				
			#DB에 등록되어 있는 카드 데이터가 들어오면, GUI에 표시함
			if self.qr1_connect == True:
				self.textEdit_qr1.setText(self.account1)
				self.textEdit_qr2.setText(self.product_name1)
				self.textEdit_qr3.setText(self.car_number1)
				self.textEdit_qr4.setText(self.stock1)
				print("ok2!2")
		except:
			pass

	@pyqtSlot(str, str)
	def cb_sock_recv_cplt(self, recv_cmd, recv_data):
		try:
			#if c_socket == self.SOCK_CONTENT_CMD_DO_ONOFF:
			#	i = 1
			self.recv_cmd1 = recv_cmd
			self.recv_data1 = recv_data
			if True:
				print('(recv data) TCP/IP :', self.recv_cmd1)
					
				#DB에 등록되어 있는 카드 데이터가 들어오면, GUI에 표시함
				if self.recv_data1 == '11':
					self.textEdit_tcp1.setText(self.recv_data1)
					current_page1 = 1
					self.stackedWidget.setCurrentIndex(current_page1)
					print("ok!")
				elif self.recv_data1 == '22':
					self.textEdit_tcp2.setText(self.recv_data1)
					current_page2 = 1
					self.stackedWidget2.setCurrentIndex(current_page2)
		except:
			pass
		

	@pyqtSlot(int ,str)
	def cb_camera_data_cplt(self, barcodeData):
		try:
			self.barcodeData2 = barcodeData
			if True:
				print('barcodedata--:', self.barcodeData2)
		except:
			pass

	'''def datetimer(self):
		current_time = datetime.datetime.now()
		current_time2 = current_time.strftime('%Y-%m-%d %H:%M:%S')
        self.datetimetext.setText(current_time2)'''
	#현재 시간 디스플레이
	def datetimer(self):
		current_time = datetime.datetime.now()
		self.label_datetimer1.setText(str(current_time.strftime('%Y-%m-%d %H:%M:%S')))

	#3page 카운트 다운,5page 카운트 다운 조건
	def lcd_run(self):
		lcd1 = self.lcdNumber_open1
		lcd2 = self.lcdNumber_open2
		lcd5 = self.lcdNumber_open5
		lcd6 = self.lcdNumber_open6
		current_page1 = self.stackedWidget.currentIndex()
		current_page2 = self.stackedWidget2.currentIndex()

		if self.page_num1 > 0:
			self.page_num1 -= 1
		if current_page1 == 2:
			if self.card1_connect == True:
				lcd1.display(self.page_num1)
		elif current_page1 == 4:
			if self.card1_connect == True:
				lcd5.display(self.page_num1)

		if self.page_num2 > 0:
			self.page_num2 -= 1
		if current_page2 == 2:
			if self.card2_connect == True:
				lcd2.display(self.page_num2)
		elif current_page2 == 4:
			if self.card2_connect == True:
				lcd6.display(self.page_num2)

	#4page 카운트 업 조건
	def lcd_run2(self):
		lcd3 = self.lcdNumber_open3
		lcd4 = self.lcdNumber_open4
		current_page1 = self.stackedWidget.currentIndex()
		current_page2 = self.stackedWidget2.currentIndex()

		if self.page_num3 < 500:
			self.page_num3 += 1
		if current_page1 == 3:
			if self.card1_connect == True:
				lcd3.display(self.page_num3)
		
		if self.page_num4 < 500:
			self.page_num4 += 1
		if current_page2 == 3:
			if self.card2_connect == True:
				lcd4.display(self.page_num4)

	#3-1page로 넘어가기 위한 조건
	def page3_1(self):
		current_page1 = self.stackedWidget.currentIndex()
		if current_page1 == 1:
			if self.card1_connect == True:
				if GPIO.input(GPIO_DI[4]) == 1:
					i =1
				else:
					self.page_num1 = 60
					current_page1 = 2
					self.stackedWidget.setCurrentIndex(current_page1)
					GPIO.output(GPIO_DO[0],1)
					self.output_Led1.setStyleSheet("Color:blue;")

	#3-2page로 넘어가기 위한 조건
	def page3_2(self):
		current_page2 = self.stackedWidget2.currentIndex()
		if current_page2 == 1:
			if self.card2_connect == True:
				if GPIO.input(GPIO_DI[5]):
					i =1
				else:
					self.page_num2 = 60
					current_page2 = 2
					self.stackedWidget2.setCurrentIndex(current_page2)
					GPIO.output(GPIO_DO[2],1)
					self.output_Led3.setStyleSheet("Color:blue;")
	
	#4-1page로 넘어가기 위한 조건
	def page4_1(self):
		current_page1 = self.stackedWidget.currentIndex()
		if current_page1 == 2: 
			if GPIO.input(GPIO_DI[4]):
				i = 1
			else:
				if GPIO.input(GPIO_DI[0]):
					i = 1
				else:
					self.page_num3 = 0 # 4page시간초 초기화
					GPIO.output(GPIO_DO[0],0)
					self.output_Led1.setStyleSheet("Color:red;")
					current_page1 = 3
					self.stackedWidget.setCurrentIndex(current_page1)
	
	#4-2page로 넘어가기 위한 조건
	def page4_2(self):
		current_page2 = self.stackedWidget2.currentIndex()
		if current_page2 == 2:
			if GPIO.input(GPIO_DI[5]):
				i = 1
			else:
				if GPIO.input(GPIO_DI[2]):
					i = 1
				else:
					self.page_num4 = 0 # 4page시간초 초기화
					GPIO.output(GPIO_DO[2],0)
					self.output_Led3.setStyleSheet("Color:red;")
					current_page2 = 3
					self.stackedWidget2.setCurrentIndex(current_page2)
	
	#5-1page로 넘어가기 위한 조건
	def page5_1(self):
		current_page1 = self.stackedWidget.currentIndex()
		if current_page1 == 3:
			if self.card1_connect == True:
				if  GPIO.input(GPIO_DI[4]):
					self.page_num1 = 60 #page5 시간초 초기화
					current_page1 = 4
					self.stackedWidget.setCurrentIndex(current_page1)
					GPIO.output(GPIO_DO[1],1)
					self.output_Led2.setStyleSheet("Color:blue;")
	
	#5-2page로 넘어가기 위한 조건
	def page5_2(self):
		current_page2 = self.stackedWidget2.currentIndex()
		if current_page2 == 3:
			if self.card2_connect == True:		
				if  GPIO.input(GPIO_DI[5]):
					self.page_num2 = 60 #page5 시간초 초기화
					current_page2 = 4
					self.stackedWidget2.setCurrentIndex(current_page2)
					GPIO.output(GPIO_DO[3],1)
					self.output_Led4.setStyleSheet("Color:blue;")


	#1-1page로 넘어가기 위한 조건 초기화
	def page1_1(self):
		current_page1 = self.stackedWidget.currentIndex()
		if self.card1_connect == True:
			if GPIO.input(GPIO_DI[1]):
				i = 0
			else:
				if current_page1 == 4:
					GPIO.output(GPIO_DO[1],0)
					self.output_Led2.setStyleSheet("Color:red;")
					self.textEdit_tcp1.clear()
					self.textEdit_card1.clear()
					self.card1_connect = False
					current_page1 = 0
					self.stackedWidget.setCurrentIndex(current_page1)

	#1-2page로 넘어가기 위한 조건 초기화
	def page1_2(self):
		current_page2 = self.stackedWidget2.currentIndex()
		if self.card2_connect == True:			
			if GPIO.input(GPIO_DI[3]):
				i = 0
			else:
				if current_page2 == 4:
					GPIO.output(GPIO_DO[3],0)
					self.output_Led4.setStyleSheet("Color:red;")
					self.textEdit_tcp2.clear()
					self.textEdit_card2.clear()
					self.card2_connect = False
					current_page2 = 0
					self.stackedWidget2.setCurrentIndex(current_page2)
	
	def in_led(self):
		if GPIO.input(GPIO_DI[0]):
			self.input_Led1.setStyleSheet("Color:red;")
		else:
			self.input_Led1.setStyleSheet("Color:blue;")
		if GPIO.input(GPIO_DI[1]):
			self.input_Led2.setStyleSheet("Color:red;")
		else:
			self.input_Led2.setStyleSheet("Color:blue;")
		if GPIO.input(GPIO_DI[2]):
			self.input_Led3.setStyleSheet("Color:red;")
		else:
			self.input_Led3.setStyleSheet("Color:blue;")
		if GPIO.input(GPIO_DI[3]):
			self.input_Led4.setStyleSheet("Color:red;")
		else:
			self.input_Led4.setStyleSheet("Color:blue;")
		if GPIO.input(GPIO_DI[4]):
			self.input_Led5.setStyleSheet("Color:red;")
		else:
			self.input_Led5.setStyleSheet("Color:blue;")
		if GPIO.input(GPIO_DI[5]):
			self.input_Led6.setStyleSheet("Color:red;")
		else:
			self.input_Led6.setStyleSheet("Color:blue;")		
	
if __name__ == "__main__":
	import sys
	app = QApplication(sys.argv)
	h_window = MainWindow()
	h_window.show()
	ret = app.exec_()
	
	#타이머 종료
	timer.stop()
	sys.exit(ret)

